[{"id":"b054dd68c0b897bd6ff64a1cf29e97c3","title":"百度安全验证（旋转图片js逆向）","content":"百度安全验证（旋转验证逆向）\n百度安全验证（旋转图片验证）是百度搜索引擎的一种反爬虫机制，当你在百度搜索引擎中搜索一些关键词时，如果你的IP地址在一段时间内搜索次数过多，百度会弹出一个验证窗口，要求你进行验证，验证通过后才能继续搜索。\n本文将介绍百度安全验证的原理，以及如何使用Python进行逆向，通过逆向js实现验证。\n百度旋转验证地址\n\n\n\n\n\n\n\n\n\n\n这里使用github上面的大佬d4nst上传的模型来识别旋转图片的角度\n\n大佬的github地址 \n\n\n  请求访问失败返回的重定向链接，获取到参数ak、backurl  \n  使用刚获取到的参数ak请求 https://wappass.baidu.com/viewlog，获取去到参数 as、ds、tk（ps：参数 callback&#x3D;jQuery110208753047592364704_1670398954090 jQueryxxx_13位时间戳，是请求跳转链接时js文件mkdjump_db105ab.js中用版本号1.10.2加上随机数再各种弄来弄去生成的[expando: “jQuery” + (nt + Math.random()).replace(&#x2F;\\D&#x2F;g, “”)]，发现固定也可以所以就不管了    \n  带上前面获取到的参数请求 https://wappass.baidu.com/viewlog/getstyle，获取到参数backstr和旋转图片的链接，把图片下载下来，就是需要我们旋转验证的图片  \n  提交旋转验证的参数，请求 https://wappass.baidu.com/viewlog 是不是有点熟悉，就是刚才获取as、ds等参数的链接，不过携带的请求参数不一样，浏览器调试跟进去看看，重点在r.rzData  \n  在r.rzData中ac_c是检测的关键，ac_c&#x3D;round((o &#x2F; 212),2)，而o是滑动的距离，o&#x3D;angle*212&#x2F;360（这里大概是图片尺寸的关系所以乘以212&#x2F;360） angle是识别的角度。然后backstr是前面返回的，其他的所有参数都可固定，包括轨迹fs是对r.rzData进行aes加密的结果（key是as+’appsapi0’） ps.为什么ac_c&#x3D;round((o &#x2F; 212),2)？我也不知道，网上找教程是这样说的，不过也确实成功  \n  对移动轨迹进行加密，其实就是AES加密  \n  js主要弄的东西  \n  重写js文件  var CryptoJS &#x3D; require(&#39;crypto-js&#39;);\n\nfunction encrypt_(angle, as, backstr) &#123;\n    var tt &#x3D; &#123;\n        &quot;cl&quot;: [\n            &#123;\n                &quot;x&quot;: 856,\n                &quot;y&quot;: 299,\n                &quot;t&quot;: 1669881034638\n            &#125;\n        ],\n        &quot;mv&quot;: [\n            &#123;\n                &quot;fx&quot;: 928,\n                &quot;fy&quot;: 384,\n                &quot;t&quot;: 1669881033914,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 315,\n                &quot;t&quot;: 1669881034069,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034242,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034646,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 862,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034803,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 889,\n                &quot;fy&quot;: 300,\n                &quot;t&quot;: 1669881034974,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 917,\n                &quot;fy&quot;: 302,\n                &quot;t&quot;: 1669881035133,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 932,\n                &quot;fy&quot;: 305,\n                &quot;t&quot;: 1669881035289,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 940,\n                &quot;fy&quot;: 306,\n                &quot;t&quot;: 1669881035445,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 947,\n                &quot;fy&quot;: 307,\n                &quot;t&quot;: 1669881035610,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 953,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881035764,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 959,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881035950,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 962,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881036105,\n                &quot;bf&quot;: 1\n            &#125;\n        ],\n        &quot;sc&quot;: [],\n        &quot;kb&quot;: [],\n        &quot;sb&quot;: [],\n        &quot;sd&quot;: [],\n        &quot;sm&quot;: [],\n        &quot;cr&quot;: &#123;\n            &quot;screenTop&quot;: 0,\n            &quot;screenLeft&quot;: 0,\n            &quot;clientWidth&quot;: 1920,\n            &quot;clientHeight&quot;: 385,\n            &quot;screenWidth&quot;: 1920,\n            &quot;screenHeight&quot;: 1080,\n            &quot;availWidth&quot;: 1920,\n            &quot;availHeight&quot;: 1040,\n            &quot;outerWidth&quot;: 1920,\n            &quot;outerHeight&quot;: 1040,\n            &quot;scrollWidth&quot;: 1920,\n            &quot;scrollHeight&quot;: 1920\n        &#125;,\n        &quot;simu&quot;: 0,\n        &quot;ac_c&quot;: (angle * 212 &#x2F; 360 &#x2F; 212).toFixed(2),\n        &quot;backstr&quot;: backstr\n    &#125;;\n    var t &#x3D; as + &#39;appsapi0&#39;\n        , n &#x3D; CryptoJS.enc.Utf8.parse(t)\n        , i &#x3D; CryptoJS.enc.Utf8.parse(JSON.stringify(tt))\n        , r &#x3D; CryptoJS.AES.encrypt(i, n, &#123;\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        &#125;);\n    return [r.toString(), tt[&#39;ac_c&#39;]];\n&#125;\n\nconsole.log(encrypt_(&#39;180&#39;,&#39;b157dbfd&#39;,&#39;8139-ugspjXUdZCZU&#x2F;u9hcbcgo1RJnWC4X+4t2aCdlpy60GGVIrLESab&#x2F;MLtmeimF5w&#x2F;g2AmNZHcA6hRagjtrYXys0EGw6z1uXb8EzYaxaqy57Th17fQd606lEoO9W6I+GBOAGfsBS1cs2oTy3V3UosJMbVXxK7PW0Vj66sjZ64bz7YCGJHGz6sSg15YxMWw&#x2F;7jN5N5Jk9&#x2F;wUWg3CQ7pumoq47K7OCmLaNegbVAemuuEqMayn5gSL&#x2F;ylXxX2VBPFPWJeoGqSCaT2mQEy6biiGIN2orsBMqFcIlBGqC5XK3A6c+5W4f31kBmfostrNjd1K3JsU&#x2F;f6AXLS7cCcnSZYgcAyai2TWjmKSCtvUpe79scSThzG&#x2F;MdojXwtA0stiY2oQ2F7+JLwf56zHV6q&#x2F;TXUYe0gurw&#x3D;&#x3D;&#39;))\n  然后各种请求获取参数，带上各种参数基本就可以了，不过有几点需要注意：验证时需要通过两次，验证返回的参数中op&#x3D;1理论上是成功了，但可能因为代理或者其他原因也不一定真的100%成功，反正继续尝试就是了，另外请求验证链接https://wappass.baidu.com/viewlog/c所携带的callback跟上面的callback不一样，应该也是通过上面说道的js文件生成的不过固定也可以就懒得弄了下面是成功的示例图：      \n","slug":"post5","date":"2022-12-07T07:08:57.000Z","categories_index":"JS,验证码","tags_index":"Python,Spider","author_index":"DwyaneLee"},{"id":"ae63644c6a89b1dcf12bd6f46e9970d0","title":"10个有趣的Python高级脚本","content":"10个有趣的Python高级脚本▍1、Jpg转Png\n图片格式转换，以前可能第一时间改文件名(｀・ω・´)。\n如今编写一个Python脚本就能完成各种图片格式的转换，此处以jpg转成png为例。\n有两种解决方法，都分享给大家。\n\n# 图片格式转换, Jpg转Png\n\n# 方法①\nfrom PIL import Image\n\nimg &#x3D; Image.open(&#39;test.xlsx.jpg&#39;)\nimg.save(&#39;test1.png&#39;)\n\n# 方法②\nfrom cv2 import imread, imwrite\n\nimage &#x3D; imread(&quot;test.xlsx.jpg&quot;, 1)\nimwrite(&quot;test2.png&quot;, image)\n\n▍2、PDF加密和解密\n如果你有100个或更多的PDF文件需要加密，手动进行加密肯定是不可行的，极其浪费时间。\n使用Python的pikepdf模块，即可对文件进行加密，写一个循环就能进行批量加密文档。\n\n# PDF加密\nimport pikepdf\n\npdf &#x3D; pikepdf.open(&quot;test.xlsx.pdf&quot;)\npdf.save(&#39;encrypt.pdf&#39;, encryption&#x3D;pikepdf.Encryption(owner&#x3D;&quot;your_password&quot;, user&#x3D;&quot;your_password&quot;, R&#x3D;4))\npdf.close()\n\n\n有加密那么便会有解密，代码如下：\n\n# PDF解密\nimport pikepdf\n\npdf &#x3D; pikepdf.open(&quot;encrypt.pdf&quot;, password&#x3D;&#39;your_password&#39;)\npdf.save(&quot;decrypt.pdf&quot;)\npdf.close()\n\n▍3、获取电脑的配置信息\n很多小伙伴可能会使用鲁大师来看自己的电脑配置，这样还需要下载一个软件。\n使用Python的WMI模块，便可以轻松查看你的电脑信息。\n\n# 获取计算机信息\nimport wmi\n\n\ndef System_spec():\n    Pc &#x3D; wmi.WMI()\n    os_info &#x3D; Pc.Win32_OperatingSystem()[0]\n    processor &#x3D; Pc.Win32_Processor()[0]\n    Gpu &#x3D; Pc.Win32_VideoController()[0]\n    os_name &#x3D; os_info.Name.encode(&#39;utf-8&#39;).split(b&#39;|&#39;)[0].decode(&#39;utf-8&#39;)\n    ram &#x3D; float(os_info.TotalVisibleMemorySize) &#x2F; 1048576\n    print(f&#39;操作系统: &#123;os_name&#125;&#39;)\n    print(f&#39;CPU: &#123;processor.Name&#125;&#39;)\n    print(f&#39;内存: &#123;ram&#125; GB&#39;)\n    print(f&#39;显卡: &#123;Gpu.Name&#125;&#39;)\n    print(&quot;\\n计算机信息如上 ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    System_spec()\n\n\n就以我自己的电脑为例，运行代码就能看到配置\n\n操作系统: Microsoft Windows 10 专业版\nCPU: Intel(R) Core(TM) i3-10100 CPU @ 3.60GHz\n内存: 15.833415985107422 GB\n显卡: Intel(R) UHD Graphics 630\n\n计算机信息如上 ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑\n\n▍4、解压文件\n使用zipfile模块进行文件解压，同理也可以对文件进行压缩。\n\n# 解压文件\nfrom zipfile import ZipFile\n\nunzip &#x3D; ZipFile(&quot;file.zip&quot;, &quot;r&quot;)\nunzip.extractall(&quot;output Folder&quot;)\n\n▍5、Excel工作表合并\n帮助你将Excel工作表合并到一张表上，表内容如下图：\n\n6张表，其余表的内容和第一张表都一样。\n\n设置表格数量为5，将会合并前5张表的内容。\n\n\nimport pandas as pd\n\n# 文件名\nfilename &#x3D; &quot;test.xlsx&quot;\n# 表格数量\nT_sheets &#x3D; 5\n\ndf &#x3D; []\nfor i in range(1, T_sheets + 1):\n    sheet_data &#x3D; pd.read_excel(filename, sheet_name&#x3D;i, header&#x3D;None)\n    df.append(sheet_data)\n\n# 合并表格\noutput &#x3D; &quot;merged.xlsx&quot;\ndf &#x3D; pd.concat(df)\ndf.to_excel(output)\n\n\n结果如下：\n\n▍6、将图像转换为素描图\n和之前的图片格式转换有点类似，就是对图像进行处理。\n以前大家可能会使用到美图秀秀，现在可能就是抖音的滤镜了。\n其实使用Python的OpenCV，就能够快速实现很多你想要的效果。\n\n# 图像转换\nimport cv2\n\n# 读取图片\nimg &#x3D; cv2.imread(&quot;img.jpg&quot;)\n# 灰度\ngrey &#x3D; cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ninvert &#x3D; cv2.bitwise_not(grey)\n# 高斯滤波\nblur_img &#x3D; cv2.GaussianBlur(invert, (7, 7), 0)\ninverse_blur &#x3D; cv2.bitwise_not(blur_img)\nsketch_img &#x3D; cv2.divide(grey, inverse_blur, scale&#x3D;256.0)\n# 保存\ncv2.imwrite(&#39;sketch.jpg&#39;, sketch_img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\n\n原图如下：\n\n素描图如下，还挺好看的\n\n\n▍7、获取CPU温度\n有了这个Python脚本，你将不需要任何软件来了解CPU的温度。\n\n# 获取CPU温度\nfrom time import sleep\nfrom pyspectator.processor import Cpu\n\ncpu &#x3D; Cpu(monitoring_latency&#x3D;1)\nwith cpu:\n    while True:\n        print(f&#39;Temp: &#123;cpu.temperature&#125; °C&#39;)\n        sleep(2)\n\n▍8、提取PDF表格\n有的时候，我们需要从PDF中提取表格数据。\n下面这个简单的脚本将帮助你在一秒钟内完成相同的操作。\n\n# 方法①\nimport camelot\n\ntables &#x3D; camelot.read_pdf(&quot;tables.pdf&quot;)\nprint(tables)\ntables.export(&quot;extracted.csv&quot;, f&#x3D;&quot;csv&quot;, compress&#x3D;True)\n\n# 方法②, 需要安装Java8\nimport tabula\n\ntabula.read_pdf(&quot;tables.pdf&quot;, pages&#x3D;&quot;all&quot;)\ntabula.convert_into(&quot;table.pdf&quot;, &quot;output.csv&quot;, output_format&#x3D;&quot;csv&quot;, pages&#x3D;&quot;all&quot;)\n\n\nPDF文档的内容如下，包含了一个表格。\n\n提取到的CSV文件内容如下：\n\n\n▍9、截图\n该脚本将简单地截取屏幕截图，而无需使用任何屏幕截图软件。\n\n# 方法①\nfrom mss import mss\n\nwith mss() as screenshot:\n    screenshot.shot(output&#x3D;&#39;scr.png&#39;)\n\n# 方法②\nimport PIL.ImageGrab\n\nscr &#x3D; PIL.ImageGrab.grab()\nscr.save(&quot;scr.png&quot;)\n\n▍10、拼写检查器\n这个Python脚本可以进行拼写检查，当然只对英文有效，毕竟中文博大精深呐。\n\n# 拼写检查\n# 方法①\nimport textblob\n\ntext &#x3D; &quot;mussage&quot;\nprint(&quot;original text: &quot; + str(text))\n\nchecked &#x3D; textblob.TextBlob(text)\nprint(&quot;corrected text: &quot; + str(checked.correct()))\n\n# 方法②\nimport autocorrect\n\nspell &#x3D; autocorrect.Speller(lang&#x3D;&#39;en&#39;)\n\n# 以英语为例\nprint(spell(&#39;cmputr&#39;))\nprint(spell(&#39;watr&#39;))\nprint(spell(&#39;survice&#39;))","slug":"post4","date":"2022-11-25T07:34:08.000Z","categories_index":"Script","tags_index":"Python","author_index":"DwyaneLee"},{"id":"d9d5b92cc89a9a959cc07650f502c9c9","title":"post3","content":"test3测试3import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","slug":"post3","date":"2022-11-23T03:36:41.000Z","categories_index":"","tags_index":"test","author_index":"DwyaneLee"},{"id":"c5749e5a4a999cd79b953d6e1af6619a","title":"post2","content":"test2测试2import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","slug":"post2","date":"2022-11-23T03:36:37.000Z","categories_index":"","tags_index":"test","author_index":"DwyaneLee"},{"id":"ca91d7e46a7142c8ad42dd23db7bac4e","title":"post1","content":"test1测试1import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","slug":"post1","date":"2022-11-23T03:10:04.000Z","categories_index":"","tags_index":"test","author_index":"DwyaneLee"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-11-22T10:44:21.572Z","categories_index":"","tags_index":"","author_index":"DwyaneLee"}]