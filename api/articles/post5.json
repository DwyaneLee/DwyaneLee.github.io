{"title":"百度安全验证（旋转图片js逆向）","uid":"b054dd68c0b897bd6ff64a1cf29e97c3","slug":"post5","date":"2022-12-07T07:08:57.000Z","updated":"2022-12-07T10:03:20.781Z","comments":true,"path":"api/articles/post5.json","keywords":"DwyaneLee, DwyaneLee's Blog, DwyaneLee的博客, 学习使我进步","cover":"/img/wallhaven-green_shark.jpg","content":"<h1 id=\"百度安全验证（旋转验证逆向）\"><a href=\"#百度安全验证（旋转验证逆向）\" class=\"headerlink\" title=\"百度安全验证（旋转验证逆向）\"></a>百度安全验证（旋转验证逆向）</h1><ul>\n<li>百度安全验证（旋转图片验证）是百度搜索引擎的一种反爬虫机制，当你在百度搜索引擎中搜索一些关键词时，如果你的IP地址在一段时间内搜索次数过多，百度会弹出一个验证窗口，要求你进行验证，验证通过后才能继续搜索。</li>\n<li>本文将介绍百度安全验证的原理，以及如何使用Python进行逆向，通过逆向js实现验证。</li>\n<li><a href=\"https://wappass.baidu.com/static/captcha/tuxing.html?&logid=11127834097395060321&ak=c27bbc89afca0463650ac9bde68ebe06&backurl=https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=TCL%25E7%25A9%25BA%25E8%25B0%2583&fenlei=256&oq=T%252526lt%25253BL%2525E7%2525A9%2525BA%2525E8%2525B0%252583%2525E5%2525AE%252589%2525E8%2525A3%252585&rsv_pq=cbfaf83c00055420&rsv_t=4ebe1EPjGBTNFE0M5z%252F%252B8tKVCaYp%252B%252Fd1V%252FQW49ZbgCdWHXDFZ79JUL4TsJs&rqlang=cn&rsv_enter=0&rsv_dl=tb&rsv_btype=t&inputT=1051&gpc=stf%253D1654569764%252C1670294564%257Cstftype%253D2&tfflag=1&signature=29e3f4de1557982e420aa3db02618e5f&timestamp=1670294566\">百度旋转验证地址</a></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里使用github上面大佬开源上传的项目（RotNet）来识别旋转图片的角度</p>\n<blockquote>\n<p><a href=\"https://github.com/d4nst/RotNet/\">github地址</a><br><a href=\"https://gitcode.net/mirrors/ShortCJL/RotateCode?utm_source=csdn_github_accelerator\">gitee地址</a></p></blockquote>\n</blockquote>\n<hr>\n<p>  请求访问失败返回的重定向链接，获取到参数<strong>ak、backurl</strong><br>  <img src=\"/../img/1.png\" alt=\"请求失败时的跳转链接\"></p>\n<p>  使用刚获取到的参数ak请求 <a href=\"https://wappass.baidu.com/viewlog\">https://wappass.baidu.com/viewlog</a>，获取去到参数 <strong>as、ds、tk</strong>（ps：参数 callback&#x3D;jQuery110208753047592364704_1670398954090 jQueryxxx_13位时间戳，是请求跳转链接时js文件mkdjump_db105ab.js中用版本号1.10.2加上随机数再各种弄来弄去生成的[expando: “jQuery” + (nt + Math.random()).replace(&#x2F;\\D&#x2F;g, “”)]，发现固定也可以所以就不管了<br>  <img src=\"/../img/2.png\" alt=\"请求viewlog\"><br>  <img src=\"/../img/3.png\" alt=\"获取as、ds、tk\"></p>\n<p>  带上前面获取到的参数请求 <a href=\"https://wappass.baidu.com/viewlog/getstyle\">https://wappass.baidu.com/viewlog/getstyle</a>，获取到参数<strong>backstr和旋转图片的链接</strong>，把图片下载下来，就是需要我们旋转验证的图片<br>  <img src=\"/../img/4.png\" alt=\"请求viewlog/getstyle\"></p>\n<p>  提交旋转验证的参数，请求 <a href=\"https://wappass.baidu.com/viewlog?callback=jQuery110205686999225389437_1670402485002&ak=xxx&as=xxx&fs=xxx&scene=&cv=submit&_=1670402485005\">https://wappass.baidu.com/viewlog</a> 是不是有点熟悉，就是刚才获取as、ds等参数的链接，不过携带的请求参数不一样，浏览器调试跟进去看看，重点在r.rzData<br>  <img src=\"/../img/5.png\" alt=\"debug进去调试\"></p>\n<p>  在r.rzData中ac_c是检测的关键，ac_c&#x3D;round((o &#x2F; 212),2)，而o是滑动的距离，o&#x3D;angle*212&#x2F;360（这里大概是图片尺寸的关系所以乘以212&#x2F;360） angle是识别的角度。然后backstr是前面返回的，其他的所有参数都可固定，包括轨迹fs是对r.rzData进行aes加密的结果（key是as+’appsapi0’） ps.为什么ac_c&#x3D;round((o &#x2F; 212),2)？我也不知道，网上找教程是这样说的，不过也确实成功<br>  <img src=\"/../img/6.png\" alt=\"重点在r.rzData\"></p>\n<p>  对移动轨迹进行加密，其实就是AES加密<br>  <img src=\"/../img/7.png\" alt=\"加密移动轨迹获取到fs\"></p>\n<p>  js主要弄的东西<br>  <img src=\"/../img/8.png\" alt=\"具体的东东\"></p>\n<p>  重写js文件<br>  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var CryptoJS &#x3D; require(&#39;crypto-js&#39;);\n\nfunction encrypt_(angle, as, backstr) &#123;\n    var tt &#x3D; &#123;\n        &quot;cl&quot;: [\n            &#123;\n                &quot;x&quot;: 856,\n                &quot;y&quot;: 299,\n                &quot;t&quot;: 1669881034638\n            &#125;\n        ],\n        &quot;mv&quot;: [\n            &#123;\n                &quot;fx&quot;: 928,\n                &quot;fy&quot;: 384,\n                &quot;t&quot;: 1669881033914,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 315,\n                &quot;t&quot;: 1669881034069,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034242,\n                &quot;bf&quot;: 2\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 856,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034646,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 862,\n                &quot;fy&quot;: 299,\n                &quot;t&quot;: 1669881034803,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 889,\n                &quot;fy&quot;: 300,\n                &quot;t&quot;: 1669881034974,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 917,\n                &quot;fy&quot;: 302,\n                &quot;t&quot;: 1669881035133,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 932,\n                &quot;fy&quot;: 305,\n                &quot;t&quot;: 1669881035289,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 940,\n                &quot;fy&quot;: 306,\n                &quot;t&quot;: 1669881035445,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 947,\n                &quot;fy&quot;: 307,\n                &quot;t&quot;: 1669881035610,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 953,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881035764,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 959,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881035950,\n                &quot;bf&quot;: 1\n            &#125;,\n            &#123;\n                &quot;fx&quot;: 962,\n                &quot;fy&quot;: 308,\n                &quot;t&quot;: 1669881036105,\n                &quot;bf&quot;: 1\n            &#125;\n        ],\n        &quot;sc&quot;: [],\n        &quot;kb&quot;: [],\n        &quot;sb&quot;: [],\n        &quot;sd&quot;: [],\n        &quot;sm&quot;: [],\n        &quot;cr&quot;: &#123;\n            &quot;screenTop&quot;: 0,\n            &quot;screenLeft&quot;: 0,\n            &quot;clientWidth&quot;: 1920,\n            &quot;clientHeight&quot;: 385,\n            &quot;screenWidth&quot;: 1920,\n            &quot;screenHeight&quot;: 1080,\n            &quot;availWidth&quot;: 1920,\n            &quot;availHeight&quot;: 1040,\n            &quot;outerWidth&quot;: 1920,\n            &quot;outerHeight&quot;: 1040,\n            &quot;scrollWidth&quot;: 1920,\n            &quot;scrollHeight&quot;: 1920\n        &#125;,\n        &quot;simu&quot;: 0,\n        &quot;ac_c&quot;: (angle * 212 &#x2F; 360 &#x2F; 212).toFixed(2),\n        &quot;backstr&quot;: backstr\n    &#125;;\n    var t &#x3D; as + &#39;appsapi0&#39;\n        , n &#x3D; CryptoJS.enc.Utf8.parse(t)\n        , i &#x3D; CryptoJS.enc.Utf8.parse(JSON.stringify(tt))\n        , r &#x3D; CryptoJS.AES.encrypt(i, n, &#123;\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        &#125;);\n    return [r.toString(), tt[&#39;ac_c&#39;]];\n&#125;\n\nconsole.log(encrypt_(&#39;180&#39;,&#39;b157dbfd&#39;,&#39;8139-ugspjXUdZCZU&#x2F;u9hcbcgo1RJnWC4X+4t2aCdlpy60GGVIrLESab&#x2F;MLtmeimF5w&#x2F;g2AmNZHcA6hRagjtrYXys0EGw6z1uXb8EzYaxaqy57Th17fQd606lEoO9W6I+GBOAGfsBS1cs2oTy3V3UosJMbVXxK7PW0Vj66sjZ64bz7YCGJHGz6sSg15YxMWw&#x2F;7jN5N5Jk9&#x2F;wUWg3CQ7pumoq47K7OCmLaNegbVAemuuEqMayn5gSL&#x2F;ylXxX2VBPFPWJeoGqSCaT2mQEy6biiGIN2orsBMqFcIlBGqC5XK3A6c+5W4f31kBmfostrNjd1K3JsU&#x2F;f6AXLS7cCcnSZYgcAyai2TWjmKSCtvUpe79scSThzG&#x2F;MdojXwtA0stiY2oQ2F7+JLwf56zHV6q&#x2F;TXUYe0gurw&#x3D;&#x3D;&#39;))</code></pre></p>\n<p>  然后各种请求获取参数，带上各种参数基本就可以了，不过有几点需要注意：<strong>验证时需要通过两次，验证返回的参数中op&#x3D;1理论上是成功了，但可能因为代理或者其他原因也不一定真的100%成功，反正继续尝试就是了，另外请求验证链接<a href=\"https://wappass.baidu.com/viewlog/c\">https://wappass.baidu.com/viewlog/c</a>所携带的callback跟上面的callback不一样，应该也是通过上面说道的js文件生成的不过固定也可以就懒得弄了</strong>下面是成功的示例图：<br>  <img src=\"/../img/9.png\" alt=\"成功示例图\"><br>  <img src=\"/../img/10.png\" alt=\"成功示例图\"><br>  <img src=\"/../img/11.png\" alt=\"成功示例图\"></p>\n","feature":true,"text":"百度安全验证（旋转验证逆向） 百度安全验证（旋转图片验证）是百度搜索引擎的一种反爬虫机制，当你在百度搜索引擎中搜索一些关键词时，如果你的IP地址在一段时间内搜索次数过多，百度会弹出一个验证窗口，要求你进行验证，验证通过后才能继续搜索。 本文将介绍百度安全验证的原理，以及如何使用P...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"JS","slug":"JS","count":1,"path":"api/categories/JS.json"},{"name":"验证码","slug":"JS/验证码","count":1,"path":"api/categories/JS/验证码.json"}],"tags":[{"name":"Python","slug":"Python","count":2,"path":"api/tags/Python.json"},{"name":"Spider","slug":"Spider","count":1,"path":"api/tags/Spider.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%99%BE%E5%BA%A6%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81%EF%BC%88%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E9%80%86%E5%90%91%EF%BC%89\"><span class=\"toc-text\">百度安全验证（旋转验证逆向）</span></a></li></ol>","author":{"name":"DwyaneLee","slug":"blog-author","avatar":"https://raw.githubusercontent.com/DwyaneLe/template/main/img/head_img.jpg","link":"/","description":"用舍由时 行藏在我","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"10个有趣的Python高级脚本","uid":"ae63644c6a89b1dcf12bd6f46e9970d0","slug":"post4","date":"2022-11-25T07:34:08.000Z","updated":"2022-11-25T09:34:00.437Z","comments":true,"path":"api/articles/post4.json","keywords":"DwyaneLee, DwyaneLee's Blog, DwyaneLee的博客, 学习使我进步","cover":"/img/sio.png","text":"10个有趣的Python高级脚本▍1、Jpg转Png 图片格式转换，以前可能第一时间改文件名(｀・ω・´)。 如今编写一个Python脚本就能完成各种图片格式的转换，此处以jpg转成png为例。 有两种解决方法，都分享给大家。 # 图片格式转换, Jpg转Png # 方法① fr...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Script","slug":"Script","count":1,"path":"api/categories/Script.json"}],"tags":[{"name":"Python","slug":"Python","count":2,"path":"api/tags/Python.json"}],"author":{"name":"DwyaneLee","slug":"blog-author","avatar":"https://raw.githubusercontent.com/DwyaneLe/template/main/img/head_img.jpg","link":"/","description":"用舍由时 行藏在我","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}